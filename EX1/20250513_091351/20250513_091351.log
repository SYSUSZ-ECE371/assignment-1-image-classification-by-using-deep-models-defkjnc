2025/05/13 09:13:51 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.8.20 | packaged by conda-forge | (default, Sep 30 2024, 17:44:03) [MSC v.1929 64 bit (AMD64)]
    CUDA available: False
    MUSA available: False
    numpy_random_seed: 864750202
    GCC: n/a
    PyTorch: 2.2.2+cpu
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 201703
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.3.2 (Git Hash 2dc95a2ad0841e29db8b22fbccaf3e5da7992b01)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /Zc:__cplusplus /bigobj /FS /utf-8 -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.2.2, USE_CUDA=0, USE_CUDNN=OFF, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

    TorchVision: 0.17.2+cpu
    OpenCV: 4.11.0
    MMEngine: 0.10.7

Runtime environment:
    dist_cfg: {'backend': 'nccl'}
    seed: 864750202
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/13 09:13:51 - mmengine - INFO - Config:
launcher = 'none'
load_from = 'checkpoints/convnext-base_3rdparty_in21k_20220124-13b83eec.pth'
model = dict(
    backbone=dict(arch='base', type='ConvNeXt'),
    head=dict(
        dropout_rate=0.5,
        loss=dict(label_smooth_val=0.2, type='LabelSmoothLoss'),
        num_classes=5,
        type='LinearClsHead'),
    type='ImageClassifier')
optim_wrapper = dict(
    clip_grad=None, optimizer=dict(lr=0.0001, type='AdamW', weight_decay=0.05))
optimizer = dict(lr=0.0001, type='AdamW', weight_decay=0.05)
param_scheduler = [
    dict(begin=0, by_epoch=True, end=10, start_factor=0.01, type='LinearLR'),
    dict(T_max=30, begin=10, end=40, eta_min=1e-06, type='CosineAnnealingLR'),
]
train_cfg = dict(max_epochs=40)
train_dataloader = dict(
    batch_size=64,
    collate_fn=dict(type='default_collate'),
    dataset=dict(
        ann_file='meta/train.txt',
        classes=[
            'daisy',
            'dandelion',
            'roses',
            'sunflowers',
            'tulips',
        ],
        data_root='data/flower_dataset',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(scale=224, type='RandomResizedCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(
                brightness=0.4,
                contrast=0.4,
                saturation=0.4,
                type='ColorJitter'),
            dict(ratio=(
                0.05,
                0.2,
            ), type='RandomErasing'),
            dict(type='PackInputs'),
        ],
        type='ImageNet'),
    num_workers=4,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(scale=224, type='RandomResizedCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(brightness=0.4, contrast=0.4, saturation=0.4, type='ColorJitter'),
    dict(ratio=(
        0.05,
        0.2,
    ), type='RandomErasing'),
    dict(type='PackInputs'),
]
work_dir = 'work_dirs/flower_mbv3'


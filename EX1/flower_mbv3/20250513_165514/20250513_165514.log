2025/05/13 16:55:14 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.8.20 | packaged by conda-forge | (default, Sep 30 2024, 17:44:03) [MSC v.1929 64 bit (AMD64)]
    CUDA available: False
    MUSA available: False
    numpy_random_seed: 639229195
    GCC: n/a
    PyTorch: 2.2.2+cpu
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 201703
  - MSVC 192930151
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.3.2 (Git Hash 2dc95a2ad0841e29db8b22fbccaf3e5da7992b01)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CXX_COMPILER=C:/actions-runner/_work/pytorch/pytorch/builder/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /Zc:__cplusplus /bigobj /FS /utf-8 -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE /wd4624 /wd4068 /wd4067 /wd4267 /wd4661 /wd4717 /wd4244 /wd4804 /wd4273, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.2.2, USE_CUDA=0, USE_CUDNN=OFF, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

    TorchVision: 0.17.2+cpu
    OpenCV: 4.11.0
    MMEngine: 0.10.7

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 639229195
    deterministic: False
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2025/05/13 16:55:14 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=256)
data_root = 'data/flower_dataset'
default_hooks = dict(
    checkpoint=dict(interval=1, type='CheckpointHook'),
    logger=dict(interval=100, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(enable=False, type='VisualizationHook'))
default_scope = 'mmpretrain'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = 'checkpoints/mobilenet-v3-small_8xb128_in1k_20221114-bd1bfcde.pth'
log_level = 'INFO'
model = dict(
    backbone=dict(arch='small', type='MobileNetV3'),
    head=dict(
        act_cfg=dict(type='HSwish'),
        dropout_rate=0.2,
        in_channels=576,
        init_cfg=dict(
            bias=0.0, layer='Linear', mean=0.0, std=0.01, type='Normal'),
        loss=dict(
            label_smooth_val=0.1, loss_weight=1.0, type='LabelSmoothLoss'),
        mid_channels=[
            1024,
        ],
        num_classes=5,
        topk=(1, ),
        type='StackedLinearClsHead'),
    neck=dict(type='GlobalAveragePooling'),
    type='ImageClassifier')
optim_wrapper = dict(
    optimizer=dict(lr=0.01, momentum=0.9, type='SGD', weight_decay=0.0001))
param_scheduler = [
    dict(begin=0, by_epoch=True, end=5, start_factor=0.1, type='LinearLR'),
    dict(
        T_max=95,
        begin=5,
        by_epoch=True,
        end=100,
        eta_min=1e-05,
        type='CosineAnnealingLR'),
]
randomness = dict(deterministic=False, seed=None)
resume = False
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(edge='short', scale=256, type='ResizeEdge'),
    dict(crop_size=224, type='CenterCrop'),
    dict(type='PackInputs'),
]
train_cfg = dict(by_epoch=True, max_epochs=100, val_interval=1)
train_dataloader = dict(
    batch_size=64,
    collate_fn=dict(type='default_collate'),
    dataset=dict(
        ann_file='train.txt',
        classes='data/flower_dataset/classes.txt',
        data_prefix='train',
        data_root='data/flower_dataset',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(scale=224, type='RandomResizedCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PackInputs'),
        ],
        type='ImageNet'),
    num_workers=5,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(scale=224, type='RandomResizedCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PackInputs'),
]
val_cfg = dict()
val_dataloader = dict(
    batch_size=64,
    collate_fn=dict(type='default_collate'),
    dataset=dict(
        ann_file='val.txt',
        classes='data/flower_dataset/classes.txt',
        data_prefix='val',
        data_root='data/flower_dataset',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(edge='short', scale=256, type='ResizeEdge'),
            dict(crop_size=224, type='CenterCrop'),
            dict(type='PackInputs'),
        ],
        type='ImageNet'),
    num_workers=5,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(topk=(1, ), type='Accuracy')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    type='UniversalVisualizer', vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs\\flower_mbv3'

2025/05/13 16:55:15 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2025/05/13 16:55:15 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
Name of parameter - Initialization information

backbone.layer0.conv.weight - torch.Size([16, 3, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer0.bn.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer0.bn.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.depthwise_conv.conv.weight - torch.Size([16, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer1.depthwise_conv.bn.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.depthwise_conv.bn.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.se.conv1.conv.weight - torch.Size([8, 16, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer1.se.conv1.conv.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.se.conv2.conv.weight - torch.Size([16, 8, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer1.se.conv2.conv.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.linear_conv.conv.weight - torch.Size([16, 16, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer1.linear_conv.bn.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.linear_conv.bn.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.expand_conv.conv.weight - torch.Size([72, 16, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer2.expand_conv.bn.weight - torch.Size([72]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.expand_conv.bn.bias - torch.Size([72]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.depthwise_conv.conv.weight - torch.Size([72, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer2.depthwise_conv.bn.weight - torch.Size([72]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.depthwise_conv.bn.bias - torch.Size([72]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.linear_conv.conv.weight - torch.Size([24, 72, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer2.linear_conv.bn.weight - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.linear_conv.bn.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.expand_conv.conv.weight - torch.Size([88, 24, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer3.expand_conv.bn.weight - torch.Size([88]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.expand_conv.bn.bias - torch.Size([88]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.depthwise_conv.conv.weight - torch.Size([88, 1, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer3.depthwise_conv.bn.weight - torch.Size([88]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.depthwise_conv.bn.bias - torch.Size([88]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.linear_conv.conv.weight - torch.Size([24, 88, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer3.linear_conv.bn.weight - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.linear_conv.bn.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.expand_conv.conv.weight - torch.Size([96, 24, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer4.expand_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.expand_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer4.depthwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.depthwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.se.conv1.conv.weight - torch.Size([24, 96, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer4.se.conv1.conv.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.se.conv2.conv.weight - torch.Size([96, 24, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer4.se.conv2.conv.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.linear_conv.conv.weight - torch.Size([40, 96, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer4.linear_conv.bn.weight - torch.Size([40]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.linear_conv.bn.bias - torch.Size([40]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.expand_conv.conv.weight - torch.Size([240, 40, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer5.expand_conv.bn.weight - torch.Size([240]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.expand_conv.bn.bias - torch.Size([240]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.depthwise_conv.conv.weight - torch.Size([240, 1, 5, 5]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer5.depthwise_conv.bn.weight - torch.Size([240]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.depthwise_conv.bn.bias - torch.Size([240]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.se.conv1.conv.weight - torch.Size([64, 240, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer5.se.conv1.conv.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.se.conv2.conv.weight - torch.Size([240, 64, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer5.se.conv2.conv.bias - torch.Size([240]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.linear_conv.conv.weight - torch.Size([40, 240, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer5.linear_conv.bn.weight - torch.Size([40]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.linear_conv.bn.bias - torch.Size([40]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.expand_conv.conv.weight - torch.Size([240, 40, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer6.expand_conv.bn.weight - torch.Size([240]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.expand_conv.bn.bias - torch.Size([240]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.depthwise_conv.conv.weight - torch.Size([240, 1, 5, 5]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer6.depthwise_conv.bn.weight - torch.Size([240]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.depthwise_conv.bn.bias - torch.Size([240]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.se.conv1.conv.weight - torch.Size([64, 240, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer6.se.conv1.conv.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.se.conv2.conv.weight - torch.Size([240, 64, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer6.se.conv2.conv.bias - torch.Size([240]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.linear_conv.conv.weight - torch.Size([40, 240, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer6.linear_conv.bn.weight - torch.Size([40]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.linear_conv.bn.bias - torch.Size([40]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.expand_conv.conv.weight - torch.Size([120, 40, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer7.expand_conv.bn.weight - torch.Size([120]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.expand_conv.bn.bias - torch.Size([120]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.depthwise_conv.conv.weight - torch.Size([120, 1, 5, 5]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer7.depthwise_conv.bn.weight - torch.Size([120]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.depthwise_conv.bn.bias - torch.Size([120]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.se.conv1.conv.weight - torch.Size([32, 120, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer7.se.conv1.conv.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.se.conv2.conv.weight - torch.Size([120, 32, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer7.se.conv2.conv.bias - torch.Size([120]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.linear_conv.conv.weight - torch.Size([48, 120, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer7.linear_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.linear_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer8.expand_conv.conv.weight - torch.Size([144, 48, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer8.expand_conv.bn.weight - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer8.expand_conv.bn.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer8.depthwise_conv.conv.weight - torch.Size([144, 1, 5, 5]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer8.depthwise_conv.bn.weight - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer8.depthwise_conv.bn.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer8.se.conv1.conv.weight - torch.Size([40, 144, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer8.se.conv1.conv.bias - torch.Size([40]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer8.se.conv2.conv.weight - torch.Size([144, 40, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer8.se.conv2.conv.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer8.linear_conv.conv.weight - torch.Size([48, 144, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer8.linear_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer8.linear_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer9.expand_conv.conv.weight - torch.Size([288, 48, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer9.expand_conv.bn.weight - torch.Size([288]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer9.expand_conv.bn.bias - torch.Size([288]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer9.depthwise_conv.conv.weight - torch.Size([288, 1, 5, 5]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer9.depthwise_conv.bn.weight - torch.Size([288]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer9.depthwise_conv.bn.bias - torch.Size([288]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer9.se.conv1.conv.weight - torch.Size([72, 288, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer9.se.conv1.conv.bias - torch.Size([72]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer9.se.conv2.conv.weight - torch.Size([288, 72, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer9.se.conv2.conv.bias - torch.Size([288]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer9.linear_conv.conv.weight - torch.Size([96, 288, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer9.linear_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer9.linear_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer10.expand_conv.conv.weight - torch.Size([576, 96, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer10.expand_conv.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer10.expand_conv.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer10.depthwise_conv.conv.weight - torch.Size([576, 1, 5, 5]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer10.depthwise_conv.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer10.depthwise_conv.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer10.se.conv1.conv.weight - torch.Size([144, 576, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer10.se.conv1.conv.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer10.se.conv2.conv.weight - torch.Size([576, 144, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer10.se.conv2.conv.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer10.linear_conv.conv.weight - torch.Size([96, 576, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer10.linear_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer10.linear_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer11.expand_conv.conv.weight - torch.Size([576, 96, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer11.expand_conv.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer11.expand_conv.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer11.depthwise_conv.conv.weight - torch.Size([576, 1, 5, 5]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer11.depthwise_conv.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer11.depthwise_conv.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer11.se.conv1.conv.weight - torch.Size([144, 576, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer11.se.conv1.conv.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer11.se.conv2.conv.weight - torch.Size([576, 144, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer11.se.conv2.conv.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer11.linear_conv.conv.weight - torch.Size([96, 576, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer11.linear_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer11.linear_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer12.conv.weight - torch.Size([576, 96, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.layer12.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer12.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.layers.0.fc.weight - torch.Size([1024, 576]): 
NormalInit: mean=0.0, std=0.01, bias=0.0 

head.layers.0.fc.bias - torch.Size([1024]): 
NormalInit: mean=0.0, std=0.01, bias=0.0 

head.layers.1.fc.weight - torch.Size([5, 1024]): 
NormalInit: mean=0.0, std=0.01, bias=0.0 

head.layers.1.fc.bias - torch.Size([5]): 
NormalInit: mean=0.0, std=0.01, bias=0.0 
2025/05/13 16:55:15 - mmengine - INFO - Load checkpoint from checkpoints/mobilenet-v3-small_8xb128_in1k_20221114-bd1bfcde.pth
2025/05/13 16:55:15 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2025/05/13 16:55:15 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2025/05/13 16:55:15 - mmengine - INFO - Checkpoints will be saved to C:\Users\PC\mmpretrain\work_dirs\flower_mbv3.
2025/05/13 16:55:55 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 16:55:55 - mmengine - INFO - Epoch(train)   [1][36/36]  lr: 1.0000e-03  eta: 1:05:27  time: 0.7965  data_time: 0.0018  loss: 1.1875
2025/05/13 16:55:55 - mmengine - INFO - Saving checkpoint at 1 epochs
2025/05/13 16:56:05 - mmengine - INFO - Epoch(val) [1][9/9]    accuracy/top1: 52.0979  data_time: 0.9809  time: 1.1840
2025/05/13 16:56:34 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 16:56:34 - mmengine - INFO - Epoch(train)   [2][36/36]  lr: 3.2500e-03  eta: 0:55:57  time: 0.7734  data_time: 0.0018  loss: 0.7711
2025/05/13 16:56:34 - mmengine - INFO - Saving checkpoint at 2 epochs
2025/05/13 16:56:36 - mmengine - INFO - Epoch(val) [2][9/9]    accuracy/top1: 77.0979  data_time: 0.0093  time: 0.2077
2025/05/13 16:57:05 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 16:57:05 - mmengine - INFO - Epoch(train)   [3][36/36]  lr: 5.5000e-03  eta: 0:52:43  time: 0.7765  data_time: 0.0017  loss: 0.6944
2025/05/13 16:57:05 - mmengine - INFO - Saving checkpoint at 3 epochs
2025/05/13 16:57:07 - mmengine - INFO - Epoch(val) [3][9/9]    accuracy/top1: 79.7203  data_time: 0.0090  time: 0.2090
2025/05/13 16:57:37 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 16:57:37 - mmengine - INFO - Epoch(train)   [4][36/36]  lr: 7.7500e-03  eta: 0:50:48  time: 0.7773  data_time: 0.0019  loss: 0.6599
2025/05/13 16:57:37 - mmengine - INFO - Saving checkpoint at 4 epochs
2025/05/13 16:57:39 - mmengine - INFO - Epoch(val) [4][9/9]    accuracy/top1: 83.3916  data_time: 0.0089  time: 0.2099
2025/05/13 16:58:08 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 16:58:08 - mmengine - INFO - Epoch(train)   [5][36/36]  lr: 1.0000e-02  eta: 0:49:27  time: 0.7687  data_time: 0.0017  loss: 0.6212
2025/05/13 16:58:08 - mmengine - INFO - Saving checkpoint at 5 epochs
2025/05/13 16:58:10 - mmengine - INFO - Epoch(val) [5][9/9]    accuracy/top1: 88.1119  data_time: 0.0100  time: 0.2124
2025/05/13 16:58:39 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 16:58:39 - mmengine - INFO - Epoch(train)   [6][36/36]  lr: 1.0000e-02  eta: 0:48:20  time: 0.7643  data_time: 0.0022  loss: 0.5875
2025/05/13 16:58:39 - mmengine - INFO - Saving checkpoint at 6 epochs
2025/05/13 16:58:41 - mmengine - INFO - Epoch(val) [6][9/9]    accuracy/top1: 83.3916  data_time: 0.0080  time: 0.2095
2025/05/13 16:59:10 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 16:59:10 - mmengine - INFO - Epoch(train)   [7][36/36]  lr: 9.9973e-03  eta: 0:47:29  time: 0.7747  data_time: 0.0018  loss: 0.5931
2025/05/13 16:59:10 - mmengine - INFO - Saving checkpoint at 7 epochs
2025/05/13 16:59:12 - mmengine - INFO - Epoch(val) [7][9/9]    accuracy/top1: 92.8322  data_time: 0.0088  time: 0.2081
2025/05/13 16:59:41 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 16:59:41 - mmengine - INFO - Epoch(train)   [8][36/36]  lr: 9.9891e-03  eta: 0:46:41  time: 0.7601  data_time: 0.0021  loss: 0.5679
2025/05/13 16:59:41 - mmengine - INFO - Saving checkpoint at 8 epochs
2025/05/13 16:59:43 - mmengine - INFO - Epoch(val) [8][9/9]    accuracy/top1: 93.8811  data_time: 0.0088  time: 0.2067
2025/05/13 17:00:13 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 17:00:13 - mmengine - INFO - Epoch(train)   [9][36/36]  lr: 9.9754e-03  eta: 0:45:57  time: 0.7618  data_time: 0.0019  loss: 0.5434
2025/05/13 17:00:13 - mmengine - INFO - Saving checkpoint at 9 epochs
2025/05/13 17:00:15 - mmengine - INFO - Epoch(val) [9][9/9]    accuracy/top1: 93.3566  data_time: 0.0084  time: 0.2089
2025/05/13 17:00:44 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 17:00:44 - mmengine - INFO - Epoch(train)  [10][36/36]  lr: 9.9564e-03  eta: 0:45:18  time: 0.7652  data_time: 0.0020  loss: 0.5341
2025/05/13 17:00:44 - mmengine - INFO - Saving checkpoint at 10 epochs
2025/05/13 17:00:46 - mmengine - INFO - Epoch(val) [10][9/9]    accuracy/top1: 92.8322  data_time: 0.0087  time: 0.2078
2025/05/13 17:01:16 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 17:01:16 - mmengine - INFO - Epoch(train)  [11][36/36]  lr: 9.9319e-03  eta: 0:44:46  time: 0.8105  data_time: 0.0022  loss: 0.5239
2025/05/13 17:01:16 - mmengine - INFO - Saving checkpoint at 11 epochs
2025/05/13 17:01:18 - mmengine - INFO - Epoch(val) [11][9/9]    accuracy/top1: 92.3077  data_time: 0.0099  time: 0.2086
2025/05/13 17:01:47 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 17:01:47 - mmengine - INFO - Epoch(train)  [12][36/36]  lr: 9.9020e-03  eta: 0:44:11  time: 0.7795  data_time: 0.0016  loss: 0.5092
2025/05/13 17:01:47 - mmengine - INFO - Saving checkpoint at 12 epochs
2025/05/13 17:01:49 - mmengine - INFO - Epoch(val) [12][9/9]    accuracy/top1: 91.6084  data_time: 0.0078  time: 0.2078
2025/05/13 17:02:19 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 17:02:19 - mmengine - INFO - Epoch(train)  [13][36/36]  lr: 9.8668e-03  eta: 0:43:35  time: 0.7668  data_time: 0.0018  loss: 0.4998
2025/05/13 17:02:19 - mmengine - INFO - Saving checkpoint at 13 epochs
2025/05/13 17:02:21 - mmengine - INFO - Epoch(val) [13][9/9]    accuracy/top1: 93.1818  data_time: 0.0085  time: 0.2080
2025/05/13 17:02:50 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 17:02:50 - mmengine - INFO - Epoch(train)  [14][36/36]  lr: 9.8262e-03  eta: 0:43:02  time: 0.7745  data_time: 0.0019  loss: 0.5111
2025/05/13 17:02:50 - mmengine - INFO - Saving checkpoint at 14 epochs
2025/05/13 17:02:52 - mmengine - INFO - Epoch(val) [14][9/9]    accuracy/top1: 92.6573  data_time: 0.0086  time: 0.2086
2025/05/13 17:03:21 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 17:03:21 - mmengine - INFO - Epoch(train)  [15][36/36]  lr: 9.7804e-03  eta: 0:42:26  time: 0.7713  data_time: 0.0022  loss: 0.5148
2025/05/13 17:03:21 - mmengine - INFO - Saving checkpoint at 15 epochs
2025/05/13 17:03:23 - mmengine - INFO - Epoch(val) [15][9/9]    accuracy/top1: 91.6084  data_time: 0.0090  time: 0.2069
2025/05/13 17:03:53 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 17:03:53 - mmengine - INFO - Epoch(train)  [16][36/36]  lr: 9.7294e-03  eta: 0:41:53  time: 0.7792  data_time: 0.0018  loss: 0.4925
2025/05/13 17:03:53 - mmengine - INFO - Saving checkpoint at 16 epochs
2025/05/13 17:03:55 - mmengine - INFO - Epoch(val) [16][9/9]    accuracy/top1: 91.9580  data_time: 0.0092  time: 0.2115
2025/05/13 17:04:24 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 17:04:24 - mmengine - INFO - Epoch(train)  [17][36/36]  lr: 9.6731e-03  eta: 0:41:21  time: 0.7705  data_time: 0.0020  loss: 0.5015
2025/05/13 17:04:24 - mmengine - INFO - Saving checkpoint at 17 epochs
2025/05/13 17:04:26 - mmengine - INFO - Epoch(val) [17][9/9]    accuracy/top1: 92.8322  data_time: 0.0088  time: 0.2120
2025/05/13 17:04:56 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 17:04:56 - mmengine - INFO - Epoch(train)  [18][36/36]  lr: 9.6118e-03  eta: 0:40:48  time: 0.7722  data_time: 0.0016  loss: 0.5004
2025/05/13 17:04:56 - mmengine - INFO - Saving checkpoint at 18 epochs
2025/05/13 17:04:58 - mmengine - INFO - Epoch(val) [18][9/9]    accuracy/top1: 94.0559  data_time: 0.0087  time: 0.2075
2025/05/13 17:05:27 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 17:05:27 - mmengine - INFO - Epoch(train)  [19][36/36]  lr: 9.5455e-03  eta: 0:40:16  time: 0.7957  data_time: 0.0020  loss: 0.5099
2025/05/13 17:05:27 - mmengine - INFO - Saving checkpoint at 19 epochs
2025/05/13 17:05:29 - mmengine - INFO - Epoch(val) [19][9/9]    accuracy/top1: 93.1818  data_time: 0.0081  time: 0.2083
2025/05/13 17:05:58 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 17:05:58 - mmengine - INFO - Epoch(train)  [20][36/36]  lr: 9.4742e-03  eta: 0:39:44  time: 0.7936  data_time: 0.0018  loss: 0.4953
2025/05/13 17:05:58 - mmengine - INFO - Saving checkpoint at 20 epochs
2025/05/13 17:06:00 - mmengine - INFO - Epoch(val) [20][9/9]    accuracy/top1: 93.5315  data_time: 0.0090  time: 0.2125
2025/05/13 17:06:30 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 17:06:30 - mmengine - INFO - Epoch(train)  [21][36/36]  lr: 9.3980e-03  eta: 0:39:13  time: 0.7730  data_time: 0.0021  loss: 0.4887
2025/05/13 17:06:30 - mmengine - INFO - Saving checkpoint at 21 epochs
2025/05/13 17:06:32 - mmengine - INFO - Epoch(val) [21][9/9]    accuracy/top1: 93.7063  data_time: 0.0097  time: 0.2143
2025/05/13 17:07:01 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 17:07:01 - mmengine - INFO - Epoch(train)  [22][36/36]  lr: 9.3170e-03  eta: 0:38:43  time: 0.7835  data_time: 0.0020  loss: 0.4909
2025/05/13 17:07:01 - mmengine - INFO - Saving checkpoint at 22 epochs
2025/05/13 17:07:04 - mmengine - INFO - Epoch(val) [22][9/9]    accuracy/top1: 93.8811  data_time: 0.0085  time: 0.2117
2025/05/13 17:07:33 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 17:07:33 - mmengine - INFO - Epoch(train)  [23][36/36]  lr: 9.2312e-03  eta: 0:38:11  time: 0.7924  data_time: 0.0018  loss: 0.4868
2025/05/13 17:07:33 - mmengine - INFO - Saving checkpoint at 23 epochs
2025/05/13 17:07:35 - mmengine - INFO - Epoch(val) [23][9/9]    accuracy/top1: 92.6573  data_time: 0.0094  time: 0.2122
2025/05/13 17:08:05 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 17:08:05 - mmengine - INFO - Epoch(train)  [24][36/36]  lr: 9.1409e-03  eta: 0:37:41  time: 0.7793  data_time: 0.0021  loss: 0.4705
2025/05/13 17:08:05 - mmengine - INFO - Saving checkpoint at 24 epochs
2025/05/13 17:08:07 - mmengine - INFO - Epoch(val) [24][9/9]    accuracy/top1: 93.8811  data_time: 0.0081  time: 0.2105
2025/05/13 17:08:36 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 17:08:36 - mmengine - INFO - Epoch(train)  [25][36/36]  lr: 9.0460e-03  eta: 0:37:09  time: 0.7751  data_time: 0.0017  loss: 0.5085
2025/05/13 17:08:36 - mmengine - INFO - Saving checkpoint at 25 epochs
2025/05/13 17:08:38 - mmengine - INFO - Epoch(val) [25][9/9]    accuracy/top1: 94.5804  data_time: 0.0082  time: 0.2099
2025/05/13 17:09:07 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 17:09:07 - mmengine - INFO - Epoch(train)  [26][36/36]  lr: 8.9468e-03  eta: 0:36:39  time: 0.7880  data_time: 0.0020  loss: 0.4978
2025/05/13 17:09:07 - mmengine - INFO - Saving checkpoint at 26 epochs
2025/05/13 17:09:09 - mmengine - INFO - Epoch(val) [26][9/9]    accuracy/top1: 94.0559  data_time: 0.0085  time: 0.2089
2025/05/13 17:09:39 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 17:09:39 - mmengine - INFO - Epoch(train)  [27][36/36]  lr: 8.8432e-03  eta: 0:36:09  time: 0.7894  data_time: 0.0017  loss: 0.4922
2025/05/13 17:09:39 - mmengine - INFO - Saving checkpoint at 27 epochs
2025/05/13 17:09:41 - mmengine - INFO - Epoch(val) [27][9/9]    accuracy/top1: 94.5804  data_time: 0.0094  time: 0.2114
2025/05/13 17:10:05 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 17:10:11 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 17:10:11 - mmengine - INFO - Epoch(train)  [28][36/36]  lr: 8.7354e-03  eta: 0:35:41  time: 0.8177  data_time: 0.0020  loss: 0.4780
2025/05/13 17:10:11 - mmengine - INFO - Saving checkpoint at 28 epochs
2025/05/13 17:10:13 - mmengine - INFO - Epoch(val) [28][9/9]    accuracy/top1: 94.0559  data_time: 0.0096  time: 0.2149
2025/05/13 17:10:44 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 17:10:44 - mmengine - INFO - Epoch(train)  [29][36/36]  lr: 8.6235e-03  eta: 0:35:13  time: 0.8013  data_time: 0.0017  loss: 0.4791
2025/05/13 17:10:44 - mmengine - INFO - Saving checkpoint at 29 epochs
2025/05/13 17:10:46 - mmengine - INFO - Epoch(val) [29][9/9]    accuracy/top1: 93.5315  data_time: 0.0088  time: 0.2146
2025/05/13 17:11:16 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 17:11:16 - mmengine - INFO - Epoch(train)  [30][36/36]  lr: 8.5077e-03  eta: 0:34:45  time: 0.7990  data_time: 0.0019  loss: 0.4916
2025/05/13 17:11:16 - mmengine - INFO - Saving checkpoint at 30 epochs
2025/05/13 17:11:18 - mmengine - INFO - Epoch(val) [30][9/9]    accuracy/top1: 93.0070  data_time: 0.0095  time: 0.2124
2025/05/13 17:11:48 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 17:11:48 - mmengine - INFO - Epoch(train)  [31][36/36]  lr: 8.3880e-03  eta: 0:34:16  time: 0.7970  data_time: 0.0022  loss: 0.4831
2025/05/13 17:11:48 - mmengine - INFO - Saving checkpoint at 31 epochs
2025/05/13 17:11:51 - mmengine - INFO - Epoch(val) [31][9/9]    accuracy/top1: 94.0559  data_time: 0.0086  time: 0.2106
2025/05/13 17:12:21 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 17:12:21 - mmengine - INFO - Epoch(train)  [32][36/36]  lr: 8.2647e-03  eta: 0:33:47  time: 0.7944  data_time: 0.0019  loss: 0.4661
2025/05/13 17:12:21 - mmengine - INFO - Saving checkpoint at 32 epochs
2025/05/13 17:12:23 - mmengine - INFO - Epoch(val) [32][9/9]    accuracy/top1: 93.8811  data_time: 0.0090  time: 0.2139
2025/05/13 17:12:54 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 17:12:54 - mmengine - INFO - Epoch(train)  [33][36/36]  lr: 8.1377e-03  eta: 0:33:19  time: 0.8061  data_time: 0.0019  loss: 0.4701
2025/05/13 17:12:54 - mmengine - INFO - Saving checkpoint at 33 epochs
2025/05/13 17:12:56 - mmengine - INFO - Epoch(val) [33][9/9]    accuracy/top1: 94.0559  data_time: 0.0089  time: 0.2106
2025/05/13 17:13:26 - mmengine - INFO - Exp name: flower_mbv3_20250513_165514
2025/05/13 17:13:26 - mmengine - INFO - Epoch(train)  [34][36/36]  lr: 8.0074e-03  eta: 0:32:50  time: 0.8031  data_time: 0.0024  loss: 0.4681
2025/05/13 17:13:26 - mmengine - INFO - Saving checkpoint at 34 epochs
2025/05/13 17:13:28 - mmengine - INFO - Epoch(val) [34][9/9]    accuracy/top1: 94.0559  data_time: 0.0090  time: 0.2195
